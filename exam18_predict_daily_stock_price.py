# -*- coding: utf-8 -*-
"""exam18_predict_daily_stock_price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zsKucSy8yNOfN8AuiQXurJIF-WOX5MzH
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import *
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.callbacks import EarlyStopping

raw_data = pd.read_csv('./datasets/samsung202401.csv')
print(raw_data.head())
raw_data.info()

raw_data['Date'] = pd.to_datetime(raw_data['Date'])     #date의 타입을 datetime으로 바꿔주기
raw_data.info()

raw_data.set_index('Date',inplace=True)     #index를 바꿔준다
print(raw_data)

raw_data['Close'].plot()
plt.show()

data_test = raw_data.sort_values('Close')       #close 를 타켓데이터로 만들어준다
print(data_test.head())
print(data_test.tail())

data_close=raw_data[['Close']]
print(data_close.head())

minmaxscaler = MinMaxScaler()                               #minmaxscale한다
scaled_data = minmaxscaler.fit_transform(data_close)
print(scaled_data[:])
print(scaled_data.shape)

sequence_X = []
sequence_Y = []
for i in range(len(scaled_data)-30):
    x = scaled_data[i:i+30]
    y = scaled_data[i+30]
    sequence_X.append(x)
    sequence_Y.append(y)
print(sequence_X[:5])
print(sequence_Y[:5])

sequence_X = np.array(sequence_X)
sequence_Y = np.array(sequence_Y)
print(sequence_X[0])
print(sequence_Y[0])

x_train,x_test,y_train,y_test = train_test_split(
    sequence_X,sequence_Y,test_size=0.2)
print(x_train.shape,y_train.shape)
print(x_test.shape,y_test.shape)

model = Sequential()
model.add(LSTM(50,input_shape=(30,1),activation='tanh'))    #LSTM  activation=탄젠트로 준다
model.add(Flatten())
model.add(Dense(1))     #activation을 주지 않는다
model.summary()

model.compile(loss='mse',optimizer = 'adam')
fit_hist = model.fit(x_train,y_train,epochs=100, validation_data=(x_test,y_test))

plt.plot(fit_hist.history['loss'][60:],label='loss')
plt.plot(fit_hist.history['val_loss'][60:],label='val_loss')

score = model.evaluate(x_test,y_test,verbose=0)
print(score)

pred = model.predict(x_test)

plt.plot(y_test[:30],label='actual')
plt.plot(pred[:30],label='predict')
plt.legend()
plt.show()

last_data_30 = scaled_data[-30:].reshape(1,30,1)
today_close = model.predict(last_data_30)
print(today_close)

today_close_won = minmaxscaler.inverse_transform(today_close)
print('%d 원'%today_close_won[0][0])