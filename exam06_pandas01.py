# -*- coding: utf-8 -*-
"""exam06_pandas01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1597RXOP-1ew_sKIgKAl5acFSTtlilDna

###pandas 실습

###DataFrame
"""

import pandas as pd

df = pd.DataFrame([[15,'남','영훈중'], #데이터 만들어보기
                   [17,'여','성암중']],
                   index=['서준','동연'],
                   columns=['나이','성별','학교'])
print(df)

df.index #index확인

df.columns #columns확인

df=df.rename(index={'서준':'학생1','동연':'학생2'}) #index 바꾸기 //익명화
df

df =df.rename(columns={'나이':'연령'}) #columns 바꾸기
df

df1 =df['연령'] #시리즈타입은 하나만 가능
df1

print(type(df1)) #list로 하면 dataframe 되고 datatype은 시리즈

df2 =df[['연령','성별']] #두번[[]]쓰면 data type 은 dataFrame // 여러개 사용가능
print(type(df2))
print(df2)

df3 = df.iloc[0] #series로 출력 //숫자로 할때 사용 //인덱싱
df3

print(type(df3))

df4 = df.loc['학생1'] #인덱스명으로 할떄 사용
df4

#df.iloc[0,0] #15
#df.iloc[0,1] #남
#df.iloc[0,2] #영훈중
#df.loc['학생1','학교'] #영훈중
#df.iloc[0, 0:2] #0과 0부터 2전까지
#df.loc['학생1','연령':'성별']

df.loc['학생3'] =[18,'남','신일중'] #데이터 추가
df.loc['학생4'] =[14,'여','풍문중']
df

df1 =df.drop(['학생3'],inplace=False ,axis='rows') #데이터 삭제  axis=0  -  row/axis=1  -  columns
df1

df['학년']=3 #다 3으로 채워진다
df

df['키']=[175,180,185,160] #값을 따로따로 줄 예정이라면 개수를 맞춰주어야한다
df

df1 = df.drop(['학년'], axis='columns', inplace=False) #원본에서 학년을 뺀 값만 받은것
df1

df

df1 = df[['연령','성별','학교','키']] #원본에서 인덱싱한것
df1

exam_data = {'이름':['경석','연주','선희'], #딕셔너리로 만들기
             '수학':[90,85,80],
             '영어':[99,98,97],
             '음악':[88,87,86],
             '체육':[79,78,77]}
df = pd.DataFrame(exam_data)
df.set_index('이름',inplace=True) #이름을 인덱스로 세팅
df

df.shape

df.iloc[0,3]=90
df

df.loc['경석','체육'] =100
df

df.loc['경석',['영어','체육']] = 120, 130 #하나만 쓰면 하나로만 값이 채워진다
df

df = df.transpose() #컴럼이랑 인덱스위치가 바뀐다
df

df = df.T #transpose랑 T랑 같다
df

df.loc['선희','음악'] =87 #중복인 인덱스 작업
df

ndf1=df.set_index('음악') #중복이 된 인덱스일 경우
ndf1

ndf1.loc[87]

ndf2 = df.set_index(['음악','수학']) #인덱스를 여러개로둔다
ndf2

ndf2.loc[(87,80)] #튜플로 해야한다

ndf2.iloc[1]

#ndf3=df.set_index(['음악']) #이름을 인덱스로 했다가 음악으로 바꾸면 데이터 손실이 일어난다
ndf3=df.reset_index().set_index(['음악']) #리셋한후 음악을 인덱스로 바꾸어준다 index() return값이 있어야한다
ndf3

#ndf =df.reindex(list(df.index)+['덕유','영림']) #reindex 자료 추가하는 데이터는 NaN으로 채워진다
ndf =df.reindex(list(df.index)+['덕유','영림'],fill_value=0)
ndf

df

ndf=df.sort_index(ascending=False) #오름차순 ascending=True 내림차순ascending=False
ndf

ndf=df.sort_values(by='영어',ascending=False) #영어로 정렬
ndf

list(df.columns).sort()

columns=list(df.columns) #컬럼정렬
columns.sort()

ndf=df[columns]
ndf

"""Series"""

sr=pd.Series([1,2,3,4,5],index=['a','b','c','d','e'])
sr

sr[1]

#student1 = pd.Series({'국어':[20,30],'영어':90})
student1 = pd.Series({'국어':20,'영어':90})
student1

a=[1,2,3] #리스트 + * 는 리스트길이만 관여
b=[4,5,6]
c= a+b
d=a*5
print(d)
#e=a/b #리스트 나누거나 뺼수없다

import numpy as np

a=np.array([1,2,3]) #행렬이랑 리스트는 다르다       행렬은 콤마가 없다
b=np.array([4,5,6])
print(a)
print(type(a))
c=a+b #요소끼리 연산가능
print(c)

percentage = student1/ 100 #연산가능하다 시리즈 각요소별로 계산한다
percentage

student2 =pd.Series({'영어':40,'국어':80,'수학':80}) #인덱스기준으로 연산가능 없는인덱스에 계산하면 NaN으로 출력된다
student2

student1+student2

sr1 = student1.add(student2,fill_value=0) #add는 fill_value=0쓰는것이가능하다
sr1

"""DataFrame"""

df

ndf=df+100 #같은요소끼리 연산한다
ndf

ndf2=ndf-df
ndf2

"""파일 저장 및  부르기"""

df

df.to_csv('./df_sample.csv') #csv저장 csv는 콤마로 구분하여 텍스트 파일로 저장한다 comma separate values//tsv tab separate values

df1 =pd.read_csv('./df_sample.csv',index_col='이름') #첫줄은 컬럼인데 인덱스는 따로 없다
df1

df1.to_csv('./df_sample2.csv',index=False) #저장할때 index=False하거나 읽을떄index_col=0을 한다

df2=pd.read_csv('./df_sample2.csv',index_col=0)
df2

df

"""json file"""

df.to_json('./df_sample.json',force_ascii=False) #unicode로 보여준다 force_ascii=False한글이 안깨짐

ndf1=pd.read_json('./df_sample.json')
ndf1

df.to_excel('./df_sample.xlsx')

df2 =pd.read_excel('./df_sample.xlsx',index_col=0)
df2

tables = pd.read_html('https://www.w3schools.com/html/html_tables.asp') #리스트
print(type(tables))
print(len(tables))
tables[1]

