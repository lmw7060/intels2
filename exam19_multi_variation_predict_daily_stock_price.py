# -*- coding: utf-8 -*-
"""exam19_multi_variation_predict_daily_stock_price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11rGZo8aBeYr144u5Y101vkMfptNYUQiw
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import *
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.callbacks import EarlyStopping

raw_data = pd.read_csv('./datasets/samsung202401.csv')
print(raw_data.head())
raw_data.info()

raw_data['Date'] = pd.to_datetime(raw_data['Date'])     #date의 타입을 datetime으로 바꿔주기
raw_data.info()

raw_data.set_index('Date',inplace=True)     #index를 바꿔준다
print(raw_data)

raw_data['Close'].plot()
plt.show()

data=raw_data['2021-01-03':'2024-01-22']
print(data.tail())
data.info()
print(data.shape)

minmax_scaler = MinMaxScaler()
scaled_data = minmax_scaler.fit_transform(data)
print(scaled_data[:5])
print(scaled_data.shape)

sequence_x = []
sequence_y = []
for i in range(len(scaled_data)-30):
    x = scaled_data[i:i+30]
    y = scaled_data[i+30][3]
    sequence_x.append(x)
    sequence_y.append(y)

sequence_x = np.array(sequence_x)
sequence_y = np.array(sequence_y)
print(sequence_x[0])
print(sequence_y[0])
print(sequence_x.shape)
print(sequence_y.shape)

x_train,x_test,y_train,y_test = train_test_split(sequence_x,sequence_y,test_size=0.2)
print(x_train.shape,y_train.shape)
print(x_test.shape,y_test.shape)

model = Sequential()
model.add(GRU(50,input_shape=(x_train.shape[1],x_train.shape[2]),return_sequences=True,activation='tanh'))
model.add(GRU(50,return_sequences=True,activation='tanh'))
model.add(Flatten())
model.add(Dense(1))
model.summary()

model.compile(loss='mse',optimizer='adam')
fit_hist = model.fit(x_train,y_train,epochs=100,
                     validation_data=(x_test,y_test),shuffle=False)#shuffle을 줘야함

plt.plot(fit_hist.history['loss'][3:],label='loss')
plt.plot(fit_hist.history['val_loss'][3:],label='val_loss')
plt.legend()
plt.show()

predict = model.predict(x_test)

plt.plot(y_test[:30],label='actual')
plt.plot(predict[:30],label='predict')
plt.legend()
plt.show()

last_data_30 = scaled_data[-30:].reshape(1,30,6)
today_close = model.predict(last_data_30)
print(today_close)

temp = np.array([0,0,0,today_close[0][0],0,0]).reshape(1,6)
today_close_won = minmax_scaler.inverse_transform(temp)
print(today_close_won[0][3],'원')