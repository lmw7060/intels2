# -*- coding: utf-8 -*-
"""exam09_visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hs9CLvgHWqRzPqbvJiQlpZw-mEyaOmLd
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import seaborn as sns

import warnings
warnings.filterwarnings(action='ignore')

point =100  #100점
#x = list(range(-50,50))
#y = list(map(lambda x: 3 * x +4, x))
#y=list(map(np.sin,x))
#print(x)
#print(y)
x =np.linspace(-2,2,point)
#y =np.sin(x)
#z= np.cos(x)
y1 = np.sqrt(1 -np.square(np.abs(x)-1))
y2 = list(-2.5 * np.sqrt(1 - np.sqrt(np.abs(x)/2)))
print(x)
fig,axes = plt.subplots(figsize=(7,4))  #plt.subplots(2,2) 행렬을 만들수 있다
plt.axhline(color='w' ,linewidth=1)#x축
plt.axvline(color='w' ,linewidth=1)#y축
#axes.plot(x, y, '-.d',markersize=1, color='red', linewidth=2) #--(점) , -.(점점) , -.d(다이아몬드) , ^(^) , *(별) , o(동그라미) , s(네모)
axes.scatter(x, y1, marker='^' ,s=10,color='red', linewidth=2)   #행렬의 원소 그림그릴수 있다
axes.plot(x, y2, color='blue', linewidth=2)  #행렬의 원소 그림그릴수 있다 axes[1,1].plot(x, z, color='blue', linewidth=2)
#axes.set_xlim(-50,-48)
#axes.set_ylim(-150,-120)
plt.show()

labels = 'Frogs','Hogs','Logs'
size=[15, 15, 45]
explode = (0, 0.1, 0)
fig,axes = plt.subplots()
wedges, texts, autotexts = axes.pie(size,labels=labels ,shadow=True, startangle=90,autopct='%1.1f%%' ,explode=explode) #explode 떼어놓음 //autopct 퍼센트삽입 // shadow 그림자  //labels 이름
##################데이터 왜곡조심
wedges[1].set(hatch='///') #데이터를 빗금침
wedges[0].set_radius(1.1) #반지름을 1.1로 만듬
wedges[1].set_theta1(90) #조각이 시작하는 각도를 90로 만듬
wedges[1].set_theta2(180) #시작부터 끝각도를 180
plt.show()

size =0.3
vals1 = [40,35,25]
vals2 = [11,29,12,23,12,13]

cmap = plt.get_cmap('tab20c')
outer_colors = cmap([0,4,12])
inner_colors = cmap([1,2,5,6,13,14])

fig, ax =plt.subplots()
ax.pie(vals1,radius=1,colors=outer_colors,
       labels=['male','female','pet'],
       autopct='%1.1f%%' ,pctdistance =0.83,
       wedgeprops={'width':size, 'edgecolor':'w','linewidth':5},#edgecolor 테두리
       startangle=0 ,counterclock=False)
ax.pie(vals2,radius=1-size,colors=inner_colors ,
       autopct='%1.1f%%' ,pctdistance =0.8,
       wedgeprops={'width':size, 'edgecolor':'w','linewidth':5},
       startangle=0 ,counterclock=False)

plt.show()

from matplotlib import colormaps
list(colormaps)

cmaps = {}

gradient = np.linspace(0, 1, 256)
gradient = np.vstack((gradient, gradient))


def plot_color_gradients(category, cmap_list):
    # Create figure and adjust figure height to number of colormaps
    nrows = len(cmap_list)
    figh = 0.35 + 0.15 + (nrows + (nrows - 1) * 0.1) * 0.22
    fig, axs = plt.subplots(nrows=nrows + 1, figsize=(6.4, figh))
    fig.subplots_adjust(top=1 - 0.35 / figh, bottom=0.15 / figh,
                        left=0.2, right=0.99)
    axs[0].set_title(f'{category} colormaps', fontsize=14)

    for ax, name in zip(axs, cmap_list):
        ax.imshow(gradient, aspect='auto', cmap=mpl.colormaps[name])
        ax.text(-0.01, 0.5, name, va='center', ha='right', fontsize=10,
                transform=ax.transAxes)

    # Turn off *all* ticks & spines, not just the ones with colormaps.
    for ax in axs:
        ax.set_axis_off()

    # Save colormap list for later.
    cmaps[category] = cmap_list

plot_color_gradients('Perceptually Uniform Sequential',
                     ['viridis', 'plasma', 'inferno', 'magma', 'cividis'])

plot_color_gradients('Sequential',
                     ['Greys', 'Purples', 'Blues', 'Greens', 'Oranges', 'Reds',
                      'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu',
                      'GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn', 'YlGn'])

plot_color_gradients('Sequential (2)',
                     ['binary', 'gist_yarg', 'gist_gray', 'gray', 'bone',
                      'pink', 'spring', 'summer', 'autumn', 'winter', 'cool',
                      'Wistia', 'hot', 'afmhot', 'gist_heat', 'copper'])

plot_color_gradients('Diverging',
                     ['PiYG', 'PRGn', 'BrBG', 'PuOr', 'RdGy', 'RdBu', 'RdYlBu',
                      'RdYlGn', 'Spectral', 'coolwarm', 'bwr', 'seismic'])

plot_color_gradients('Cyclic', ['twilight', 'twilight_shifted', 'hsv'])

plot_color_gradients('Qualitative',
                     ['Pastel1', 'Pastel2', 'Paired', 'Accent', 'Dark2',
                      'Set1', 'Set2', 'Set3', 'tab10', 'tab20', 'tab20b',
                      'tab20c'])

plot_color_gradients('Miscellaneous',
                     ['flag', 'prism', 'ocean', 'gist_earth', 'terrain',
                      'gist_stern', 'gnuplot', 'gnuplot2', 'CMRmap',
                      'cubehelix', 'brg', 'gist_rainbow', 'rainbow', 'jet',
                      'turbo', 'nipy_spectral', 'gist_ncar'])

plt.show()

color = {}
for name,hex_value in mpl.colors.cnames.items():
    print(name,hex_value)

#plt.style.use('seaborn-v0_8')

plt.style.available

n = 10
x = list(range(n))
y1 = np.random.uniform(1,7,n)
y2 = np.random.uniform(1,7,n)

fig , ax = plt.subplots()
ax.bar(x, y1, 0.8, facecolor='olive')
ax.bar(x, -y2, 0.8, facecolor='#7777ff',alpha=0.5) #alpha 는 투명도
ax.set_title('Bar plot',fontdict={'fontsize':30})
plt.show()

width = 0.35

fig, ax = plt.subplots()

ax.bar(list(map(lambda x: x-width/2,x)),y1,width)
ax.bar(list(map(lambda x: x+width/2,x)),y2,width)
plt.show()

n =5
ind = np.arange(n)
menMeans = (20,35,30,35,-27)
womenMeans = (25,32,34,20,-25)
menStd=(2,3,4,1,2)
womenStd=(3,5,2,3,3)
width=0.35

fig, ax = plt.subplots()
ax.bar(ind,menMeans,width,label='Men',yerr=menStd)
ax.bar(ind,womenMeans,width,label='Women',bottom=menMeans ,yerr=womenStd) #yerr 막대그래프 bottom속성은 아래에 두겠다는 의미
ax.set_title('Scores by group and gender')
ax.legend() #범례추가
plt.show()

import pandas as pd

df= pd.read_csv('./datasets/titanic.csv')

titanic_age = df[['Age','Survived']].dropna()
titanic_age

def age_band(num):
    for i in range(1,10):
        if num <10 *i:
            return f'under{i*10}'
titanic_age['age_band']=titanic_age['Age'].apply(age_band) #10살 기준으로 나눔
titanic_age

titanic_age = titanic_age[['age_band','Survived']]
titanic_group_age=titanic_age.groupby('age_band')['Survived'].value_counts().sort_index()
print(titanic_group_age)
titanic_group_age=titanic_group_age.unstack().fillna(0)#unstack 컬럼을 펴준다
titanic_group_age['Survival rate'] = titanic_group_age[1] / (titanic_group_age[0] +titanic_group_age[1])*100
titanic_group_age

from matplotlib.ticker import FuncFormatter

fig , ax = plt.subplots(1,2,figsize=(12,5))
#bar1
ax[0].bar(titanic_group_age.index, titanic_group_age['Survival rate'])
ax[0].set_title('Age Band & Survival Rate')

with plt.xkcd(1):       #기울이기
    color_map=['gray'] *9
    color_map[0] = color_map[8] = '#3caea3'
    ax[1].bar(titanic_group_age.index, titanic_group_age['Survival rate'],  #바 그래프 만들기
            color=color_map, edgecolor='black',
            linewidth=1.2, alpha=0.7)
    ax[1].set_title('Age Band & Survival Rate', fontsize=15,        #그래프 제목 쓰기
                    fontweight='bold', position=(0.5, 1.1))
    for i,rate in enumerate(titanic_group_age['Survival rate']):    #for문 돌려서 annotate를 써준다 annotate를 일일이 써야하기때문
        ax[1].annotate(f'{rate:.2f}%',xy=(i,rate+2),                #그래프 위에 퍼센트 삽입
                    va='center',ha ='center',fontsize=10,
                    fontweight='bold', color='#383838')
    ax[1].yaxis.set_major_formatter(FuncFormatter(lambda y,_:f'{y:}%'))     #y값에 %를 추가하여 삽입
    ax[1].set_xticklabels(titanic_group_age.index, rotation=40,size=10)     #x값을 기울이기

plt.tight_layout()      #tight하게 그래프를 출력한다 하지만 겹쳤을때는 띄워준다
plt.show()

from sklearn.datasets import load_iris
iris = load_iris()
iris_df = pd.DataFrame(iris.data,columns=iris.feature_names)
iris_df['species']=[iris.target_names[i] for i in iris.target]
iris_df.info()
iris_df.head()

iris

cmap =plt.get_cmap('Reds')
inner_colors=cmap([0.75,0.5,0.35,0.25])

fig , ax = plt.subplots(1,2,figsize=(10,5))

ax[0].scatter(x='petal length (cm)',y='petal width (cm)',data=iris_df, color='gray')
ax[0].set_title('iris')

ax[1].scatter(x='petal length (cm)',y='petal width (cm)',
              data=iris_df[iris_df['species']=='setosa'],
              color='olive' , label='setosa' , s=70 , alpha=0.5)
ax[1].scatter(x='petal length (cm)',y='petal width (cm)',
              data=iris_df[iris_df['species']=='versicolor'],
              color='plum' , label='versicolor' , s=70, alpha=0.5)
ax[1].scatter(x='petal length (cm)',y='petal width (cm)',
              data=iris_df[iris_df['species']=='virginica'],
              color='navy' , label='virginica' , s=70, alpha=0.5)
ax[1].legend()
plt.show()

sns.FacetGrid(iris_df, hue='species').map(plt.scatter, 'petal length (cm)','petal width (cm)').add_legend()
#sns.FacetGrid를 통해 3가지 정보를 확인 가능
fig = plt.gcf()
fig.set_size_inches(10,6)
plt.show()

sns.pairplot(iris_df,hue='species')
#pairplot을 사용하여 각요소별 그래프를 그릴수있다
plt.show()

from plotly.express import scatter_3d

fig = scatter_3d(iris_df, x='sepal length (cm)',y='petal length (cm)',
                 z='petal width (cm)', color='species')
#3차원을 통해 4가지정보를 알 수 있다
fig.show()

fig = scatter_3d(iris_df, x='sepal length (cm)',y='petal length (cm)',
                 z='petal width (cm)', color='sepal width (cm)',symbol='species')
#5가지의 정보를 파악할 수 있다
fig.show()

plt.figure(figsize=(10,7))
plt.subplot(2,2,1)
#violin모양을 통해 평균이나 분포를 확인 할 수 있다
sns.violinplot(x='species',y='petal length (cm)',data=iris_df)
#swarmplot을 통해 분포나 평균을 알수 있다.
#sns.swarmplot(x='species',y='petal length (cm)',data=iris_df, color='k', alpha=0.3)
plt.subplot(2,2,2)
sns.violinplot(x='species',y='petal width (cm)',data=iris_df)
#sns.swarmplot(x='species',y='petal width (cm)',data=iris_df, color='k', alpha=0.3)
plt.subplot(223)
sns.violinplot(x='species',y='sepal length (cm)',data=iris_df)
#sns.swarmplot(x='species',y='sepal length (cm)',data=iris_df, color='k', alpha=0.3)
plt.subplot(224)
sns.violinplot(x='species',y='sepal width (cm)',data=iris_df)
#sns.swarmplot(x='species',y='sepal width (cm)',data=iris_df, color='k', alpha=0.3)

plt.show()

"""정규분포"""

n_point =10000000
n_bins =20

#Generate two normal distributions
dist1 = np.random.normal(0,2,n_point)
dist2 = np.random.normal(0,10,n_point)


fig, axes = plt.subplots(1,2,sharey=True, tight_layout=True, figsize=(8,5))

axes[0].hist(dist1,bins=n_bins)
axes[1].hist(dist2,bins=n_bins)

plt.show()

fig, axes = plt.subplots(2,1,figsize=(5,15),tight_layout=True)
axes[0].hist2d(dist1, dist2,bins=40)    #hitmap 위의 그래프를 위에서 볼때
axes[0].axis('equal')
plt.show()

fig = plt.figure(figsize=(16, 10)) #3차원만들기
ax = fig.add_subplot(projection='3d')

hist, xedges, yedges = np.histogram2d(dist1, dist2, bins=n_bins,
                                      range=[[-7, 7], [-30, 30]])
xpos, ypos = np.meshgrid(xedges[:-1] + 0.25, yedges[:-1] + 0.25, indexing='ij')
xpos = xpos.ravel()
ypos = ypos.ravel()
zpos = 0
dx = dy = 0.3 * np.ones_like(zpos)
dz = hist.ravel()

ax.bar3d(xpos, ypos, zpos, dx, dy, dz, zsort='average')
ax.view_init(elev=20, azim=15)
plt.show()

###행렬로 만들어 보기
x=[0,1]
y=[0,1]
fig, axes = plt.subplots(2,3,figsize=(8,5))
#행렬에 따라 바뀜
axes[0][0].scatter(x='petal length (cm)',y='petal width (cm)',data=iris_df, color='gray')
axes[0][0].set_title('iris')
axes[1][0].scatter(x='petal length (cm)',y='petal width (cm)',
              data=iris_df[iris_df['species']=='setosa'],
              color='olive' , label='setosa' , s=70 , alpha=0.5)
axes[1][0].scatter(x='petal length (cm)',y='petal width (cm)',
              data=iris_df[iris_df['species']=='versicolor'],
              color='plum' , label='versicolor' , s=70, alpha=0.5)
axes[1][0].scatter(x='petal length (cm)',y='petal width (cm)',
              data=iris_df[iris_df['species']=='virginica'],
              color='navy' , label='virginica' , s=70, alpha=0.5)

axes[1,2].plot(x,y)
plt.show()

fig = plt.figure(figsize=(8,5))
ax = fig.add_axes([0,0,1,1])
ax.set_title('figure')
plt.show()

fig = plt.figure(figsize=(8,5))
ax = [None,None,None]
#행렬을 3개로 나눈것
ax[0] = fig.add_axes([0.1,0.1,0.4,0.8])
ax[1] = fig.add_axes([0.55,0.15,0.35,0.4])
ax[2] = fig.add_axes([0.65,0.6,0.2,0.3])

ax[0].scatter(x='petal length (cm)',y='petal width (cm)',
              data=iris_df[iris_df['species']=='setosa'],
              color='olive' , label='setosa' , s=70 , alpha=0.5)
ax[0].scatter(x='petal length (cm)',y='petal width (cm)',
              data=iris_df[iris_df['species']=='versicolor'],
              color='plum' , label='versicolor' , s=70, alpha=0.5)
ax[0].scatter(x='petal length (cm)',y='petal width (cm)',
              data=iris_df[iris_df['species']=='virginica'],
              color='navy' , label='virginica' , s=70, alpha=0.5)
ax[0].legend()

for i in range(3):
    ax[i].set_title('ax[{}]'.format(i))
    ax[i].set_xticks([i])
    ax[i].set_yticks([i])

plt.show()

fig=plt.figure(figsize=(8,5))
ax=[]
#ax를 빈리스트로 만들어 직접 추가
ax.append(plt.subplot2grid((2,3),(0,0)))
ax.append(plt.subplot2grid((2,3),(0,1)))
ax.append(plt.subplot2grid((2,3),(0,2)))
ax.append(plt.subplot2grid((2,3),(1,0)))
ax.append(plt.subplot2grid((2,3),(1,1)))
ax.append(plt.subplot2grid((2,3),(1,2)))
plt.show()

fig=plt.figure(figsize=(8,5))
ax=[]
#크기를 조절 가능
ax.append(plt.subplot2grid((3,4),(0,0),colspan=2,rowspan=2))
ax.append(plt.subplot2grid((3,4),(0,2)))
ax.append(plt.subplot2grid((3,4),(0,3),rowspan=3))
ax.append(plt.subplot2grid((3,4),(1,2)))
#ax.append(plt.subplot2grid((3,4),(2,2)))
ax.append(plt.subplot2grid((3,4),(2,0),colspan=3))

for i in range(5):
    ax[i].set_title('ax[{}]'.format(i))
    ax[i].set_xticks([])
    ax[i].set_yticks([])

fig.tight_layout()
plt.show()

fig = plt.figure(figsize=(8,5))
gs=fig.add_gridspec(3,4)

axes = [None for _ in range(5)]
#크기를 리스트 슬라이싱을 통해서 조절가능
axes[0] = fig.add_subplot(gs[0:2,0:2])
axes[1] = fig.add_subplot(gs[0,2])
axes[2] = fig.add_subplot(gs[:,-1])
axes[3] = fig.add_subplot(gs[1,2])
axes[4] = fig.add_subplot(gs[2,:-1])

for i in range(5):
    axes[i].set_title('axes[{}]'.format(i))
    axes[i].set_xticks([])
    axes[i].set_yticks([])

fig.tight_layout()
plt.show()

