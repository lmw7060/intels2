# -*- coding: utf-8 -*-
"""exam10_iris_classfication.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JK41oFcBkTk_fkwjOm9nWebZeynqMZyv
"""

import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
import pandas as pd

iris=load_iris()
print(type(iris))
print('Data shape',iris.data.shape)
print('Lable',iris.target.shape)
print(iris)

iris_df = pd.DataFrame(iris.data,columns=iris.feature_names)
pd.plotting.scatter_matrix(iris_df, c= iris.target,
                           figsize=(7,7), marker='o',
                           hist_kwds={'bins':20},s=60,alpha=0.8)
plt.show()

iris_df.info()

x = iris.data
y= iris.target.reshape(-1,1) #reshape(인자1,인자2) 인자1과 인자2를 곱해서 데이터수 만큼 묶어줌
y.shape

encoder = OneHotEncoder(sparse=False)   #sparse는 희소행렬 default = True
encoded_y = encoder.fit_transform(y)
print(encoded_y.shape)
print(encoded_y[45:55])

x_train, x_test,y_train,y_test=train_test_split(x,encoded_y,test_size=0.2)
print(x_train.shape,y_train.shape)
print(x_test.shape,y_test.shape)

model = Sequential()
model.add(Dense(128,input_dim=4,activation='relu'))
model.add(Dense(256,activation='relu'))
model.add(Dense(512,activation='relu'))
model.add(Dense(256,activation='relu'))
model.add(Dense(128,activation='relu'))
model.add(Dense(3,activation='softmax'))#다중출력이기 때문에 softmax
model.summary()

opt = Adam(lr=0.001)
model.compile(opt,loss='categorical_crossentropy',
              metrics=['accuracy'])
fit_hist=model.fit(x_train,y_train,batch_size=50,epochs=20,verbose=1)

score = model.evaluate(x_test,y_test,verbose=0)
print('Final test set accuracy',score[1])

plt.plot(fit_hist.history['accuracy'])

labels=iris.target_names
labels

my_sample = np.random.randint(30)
sample = x_test[my_sample]
print('sample data',sample)
sample = sample.reshape(1,4)
print('reshape data',sample)
pred=model.predict(sample)
print('pred is :',pred)
print('actual is :',y_test[my_sample])
print('Target :',labels[np.argmax(y_test[my_sample])])
print('Prediction after learning is :',labels[np.argmax(pred)])